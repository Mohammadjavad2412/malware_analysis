from rest_framework.authentication import BaseAuthentication
from rest_framework.exceptions import AuthenticationFailed
from django.utils.encoding import smart_str
from malware_analysis.settings import DAAS_MANAGER_URL
import requests
import base64
import json

class CustomBasicAuthentication(BaseAuthentication):
    def authenticate(self, request):
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            return None
        auth_type, auth_string = auth_header.split(' ')
        if smart_str(auth_type.lower()) != 'basic':
            return None
        try:
            decoded_auth_string = base64.b64decode(smart_str(auth_string)).decode('utf-8')
            username, password = decoded_auth_string.split(':')
        except:
            raise AuthenticationFailed('authentication failed during unhashing auth header')
        manager_validation_url = f"http://{DAAS_MANAGER_URL}/users/is_valid_user/"
        body = {
            "email": username,
            "password": password
        }
        request = requests.post(url=manager_validation_url, data=body)
        if request.status_code == 200:
            response = json.loads(request.content)['info']
            if response == True:
                return None
            else:
                raise AuthenticationFailed('authentication failed, please provide valid credentials..')
        elif request.status_code == 400:
            raise AuthenticationFailed('an error ocurred during authentication..')
        else:
            raise AuthenticationFailed('server down, try again later..')


