from rest_framework.authentication import BaseAuthentication
from rest_framework.exceptions import AuthenticationFailed
from django.utils.encoding import smart_str
from malware_analysis.settings import DAAS_MANAGER_URL
import requests
import base64
import json

class CustomBasicAuthentication(BaseAuthentication):
    def authenticate(self, request):
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            raise AuthenticationFailed("Authorization not provided")
        auth_type, auth_string = auth_header.split(' ')
        if smart_str(auth_type.lower()) == 'basic':
            try:
                decoded_auth_string = base64.b64decode(smart_str(auth_string)).decode('utf-8')
                username, password = decoded_auth_string.split(':')
            except:
                raise AuthenticationFailed('authentication failed during unhashing auth header')
            manager_validation_url = f"https://{DAAS_MANAGER_URL}/users/is_valid_user/"
            body = {
                "email": username,
                "password": password
            }
            request = requests.post(url=manager_validation_url, data=body)
            if request.status_code == 200:
                response = json.loads(request.content)['info']
                if response == True:
                    return None
                else:
                    raise AuthenticationFailed('authentication failed, please provide valid credentials..')
            elif request.status_code == 400:
                raise AuthenticationFailed('an error ocurred during authentication..')
            else:
                raise AuthenticationFailed('server down, try again later..')
        elif smart_str(auth_type.lower()) == 'bearer':
            access_token = auth_string
            request_headers = {"Authorization" : f"Bearer {access_token}"}
            manager_validation_url = f"https://{DAAS_MANAGER_URL}/users/profile/"
            request = requests.get(url=manager_validation_url, headers=request_headers)
            if request.status_code == 200:
                response = json.loads(request.content)
                if response['is_superuser'] == True:
                    return None
                else:
                    return AuthenticationFailed('not authenticated nor admin')
            elif request.status_code == 400:
                raise AuthenticationFailed('an error ocurred during authentication..')
            else:
                raise AuthenticationFailed('server down, please try again later...')
