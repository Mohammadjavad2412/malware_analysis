from django.db import models
from django.contrib.postgres.fields import ArrayField
from django.db.models.signals import post_save
from django.dispatch import receiver
import ast

class Files(models.Model):
    file = models.FileField(upload_to='files/',null=True, blank=True)
    file_name = models.CharField(max_length=100, null=True, blank=True)
    file_hash = models.CharField(max_length=200, null=True, blank=True)
    file_size_in_bytes = models.PositiveBigIntegerField(null=True,blank=True)
    file_content_type = models.CharField(max_length=200, null=True, blank=True)
    transmission_type = models.CharField(max_length=100, null=True, blank=True)
    username = models.CharField(max_length=100, null=True, blank=True)
    yara_scanner_status = models.CharField(max_length=40,null=True, blank=True)
    clamav_scanner_status = models.CharField(max_length=40,null=True, blank=True)
    yara_scan_summary = models.TextField(max_length=200,null=True, blank=True)
    yara_scan_result = models.BooleanField(default=False, null=True, blank=True)
    yara_error_message = models.TextField(null=True, blank=True)
    clamav_scan_summary = models.TextField(max_length=200, null=True, blank=True)
    clamav_scan_result = models.BooleanField(default=False, null=True, blank=True)
    antiviruses_scan_result = models.BooleanField(default=False, null=True, blank=True)
    antiviruses_scanner_status = models.CharField(max_length=40,null=True, blank=True)
    antiviruses_scan_sandbox_summary = models.TextField(null=True, blank=True)
    antiviruses_scan_vendors_summary = models.TextField(null=True, blank=True)
    antiviruses_last_analysis_stats = models.TextField(null=True, blank=True)
    antiviruses_crowdsourced_ids_results = models.TextField(null=True, blank=True)
    antiviruses_error_message = models.TextField(null=True, blank=True)
    antiviruses_status_code = models.IntegerField(null=True, blank=True)
    clamav_error_message = models.TextField(null=True,blank=True)
    created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    scan_result = models.CharField(max_length=40,null=True, blank=True, default="IN_PROCESS")

@receiver(post_save, sender=Files)
def update_scan_result(sender, instance, **kwargs):
    if 'update_scan_result' in getattr(instance, '_prevent_recursion', []):
        return
    sandbox_status = instance.antiviruses_scanner_status
    sandbox_status_code = instance.antiviruses_status_code
    sandbox_result = instance.antiviruses_scan_result
    clamav_status = instance.clamav_scanner_status
    clamav_result = instance.clamav_scan_result
    if sandbox_status == "FINISHED" and clamav_status == "FINISHED":
        if sandbox_status_code == 200:
            scan_result = "MALWARE" if sandbox_result else "CLEAN"
        else:
            scan_result = "MALWARE" if clamav_result else "CLEAN"
        if not hasattr(instance, '_prevent_recursion'):
            instance._prevent_recursion = []
        instance._prevent_recursion.append('update_scan_result')
        instance.scan_result = scan_result
        instance.save(update_fields=['scan_result'])
        instance._prevent_recursion.remove('update_scan_result')



class UbaReport(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    username = models.CharField(max_length=200, null=True, blank=True)
    file_names = ArrayField(models.CharField(max_length=2500 ,null=True, blank=True),null=True, blank=True)
    original_file_name = models.CharField(max_length=100, null=True, blank=True)
    file_hash = models.CharField(max_length=200,null=True, blank=True)
    transmission_type = models.CharField(max_length=100, null=True, blank=True)
    is_ban = models.BooleanField(default=False, null=True, blank=True)
    malbehave_count = models.IntegerField(null=True, blank=True)
    

class MimeTypes(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    file = models.FileField(upload_to='mime_rlated_files/',null=True, blank=True)
    mimetype = models.TextField(max_length=2000, null=True, blank=True)
    extension = models.TextField(max_length=2000, null=True, blank=True)

    @property
    def mimetype_list(self):
        return list(ast.literal_eval(self.mimetype))
    
    @property
    def extension_list(self):
        return list(ast.literal_eval(self.extension))