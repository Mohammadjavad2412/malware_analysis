from django.core.management.base import BaseCommand
from analyze.models import MimeTypes
from utils.functions import add_custom_mimetypes
import mimetypes


class Command(BaseCommand):
    help = "this command create mimetype, extension objects into database when running project"

    def handle(self, *args, **options):
        if not MimeTypes.objects.all().exists():
            extension_mimetype_mapper = mimetypes.types_map
            mimetype_extension_mapper = {}
            for extension, mimetype in extension_mimetype_mapper.items():
                if mimetype not in mimetype_extension_mapper:
                    mimetype_extension_mapper[mimetype] = ()
                mimetype_extension_mapper[mimetype] = list(mimetype_extension_mapper[mimetype])
                mimetype_extension_mapper[mimetype].append(extension)
                mimetype_extension_mapper[mimetype] = tuple(mimetype_extension_mapper[mimetype])
            mimetype_extension_mapper = {tuple([mimetype]): extension for mimetype, extension in mimetype_extension_mapper.items()}
            print(mimetype_extension_mapper)
            instances = [
                MimeTypes(extension=extension, mimetype=mimetype)
                for mimetype, extension in mimetype_extension_mapper.items()
            ]
            MimeTypes.objects.bulk_create(instances)
            add_custom_mimetypes()
            self.stdout.write(self.style.SUCCESS('extension and mimetypes data created successfully.'))
        else:
            pass


