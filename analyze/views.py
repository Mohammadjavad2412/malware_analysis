from rest_framework.viewsets import ModelViewSet
from rest_framework.response import Response
from rest_framework import status
from analyze.models import Files
from analyze.serializers import FileSerializers
from django_filters.rest_framework import DjangoFilterBackend
from django.utils.encoding import smart_str
from malware_analysis import settings
from analyze.tasks import scan_files_task
from analyze.throttles import ConditionalThrottle
from analyze.authenticate import CustomBasicAuthentication
from analyze.permissions import IsOnlyOwner
import base64
import logging
import os
import traceback

class ScanFiles(ModelViewSet):

    queryset = Files.objects.all()
    serializer_class = FileSerializers
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['file_name','username']
    throttle_classes = [ConditionalThrottle]
    authentication_classes = [CustomBasicAuthentication]
    permission_classes = [IsOnlyOwner]


    def get_queryset(self):
        auth_header = self.request.headers.get('Authorization')
        _, auth_string = auth_header.split(' ')
        decoded_auth_string = base64.b64decode(smart_str(auth_string)).decode('utf-8')
        username, _= decoded_auth_string.split(':')
        queryset = Files.objects.filter(username=username)
        return queryset
        

    def create(self, request, *args, **kwargs):
        try:
            auth_header = self.request.headers.get('Authorization')
            _, auth_string = auth_header.split(' ')
            decoded_auth_string = base64.b64decode(smart_str(auth_string)).decode('utf-8')
            username, _= decoded_auth_string.split(':')
            file = request.FILES.get('file')
            if file:
                file_name = file.name
                file_size = file.size
                file_content_type = file.content_type
                request_data = {
                    "file": file
                }
                serializer = self.get_serializer(data=request_data)
                if serializer.is_valid():
                    obj = Files(
                        file = file,
                        username = username,
                        file_name = file_name,
                        file_size_in_bytes = file_size,
                        file_content_type = file_content_type,
                        yara_scanner_status = "IN_PROCESS",
                        clamav_scanner_status = "IN_PROCESS",
                        antiviruses_scanner_status = "IN_PROCESS"
                    )
                    obj.save()
                    obj_pk = obj.pk
                    get_file = obj.file.name
                    file_path = os.path.join(settings.BASE_DIR, f"{get_file}")
                    scan_files_task.delay(obj_pk, file_path)
                    return Response({"info":"scanning files in process"}, status.HTTP_200_OK)
                else:
                    return Response(serializer.errors, status.HTTP_400_BAD_REQUEST)
            else:
                return Response({"error": "file not sent properly"}, status.HTTP_400_BAD_REQUEST)
        except:
            logging.error(traceback.format_exc())
            return Response({"error":"something's wrong"}, status.HTTP_500_INTERNAL_SERVER_ERROR)
