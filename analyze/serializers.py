from rest_framework.serializers import ModelSerializer
from rest_framework import serializers
from analyze.models import Files, UbaReport, MimeTypes, LogServerConfig
from django.core.exceptions import ValidationError
from zipfile import ZipFile

class FileSerializers(ModelSerializer):

    downloadable_link = serializers.SerializerMethodField("get_downloadable_link")


    class Meta:
        model = Files
        fields = "__all__"

    def get_downloadable_link(self, obj):
        file_path = obj.file.path
        return file_path
    
    def validate_file(self, value):
        file_type = value.content_type
        if file_type == "application/zip":
            zip_file = ZipFile(value)
            file_list = zip_file.filelist
            for _ in file_list:
                file_name = _.filename
                if _.compress_size != 0:
                    file = file_name
                    break
                else:
                    pass
            try:
                zip_file.open(file)
            except Exception as e:
                raise serializers.ValidationError(e)
        else:
            return value


class MaliciousUbaSerializers(ModelSerializer):

    class Meta:
        model = UbaReport
        fields = "__all__"

    def update(self, instance, validated_data):
        is_ban = validated_data['is_ban']
        if is_ban == False:
            instance.malbehave_count = 0
            instance.save()
            return super().update(instance, validated_data)
        return super().update(instance, validated_data)
    

class MimetypesSerializers(ModelSerializer):
    mimetype_list = serializers.ReadOnlyField()
    extension_list = serializers.ReadOnlyField()

    class Meta:
        model = MimeTypes
        fields = "__all__"

class LogServerSerializer(ModelSerializer):

    class Meta:
        model = LogServerConfig
        fields = "__all__"

    def create(self, validated_data):
        if LogServerConfig.objects.exists():
            raise ValidationError("you can just have one server log!")
        return super().create(validated_data)




