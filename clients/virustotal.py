from analyze.models import Files, Scanners
from malware_analysis.settings import LICENSE_ID
from utils.functions import generate_secure_link, vt_scan_endpoint
import requests
import json
import subprocess as sp

class VirusTotalClient():


    def get_file_report_by_hash(self, obj_pk, file):
        Command = ['md5sum', f"{file}"]
        proc = sp.Popen(Command, stderr=sp.PIPE, stdout=sp.PIPE)
        stdout, stderr = proc.communicate()
        if stderr:
            obj = Files.objects.get(id=obj_pk)
            error_message = {"error",stderr.decode()}
            obj.antiviruses_error_message = error_message
            obj.antiviruses_scanner_status = "FAILED"
        decoded_stdout = stdout.decode()
        file_hash = decoded_stdout.split()[0]
        #request hash to virustotal
        self.scan_file_by_hash(obj_pk, file_hash)
    
    def scan_file_by_hash(self, obj_pk, file_hash):
        try:
            #raed license from env and send it to malware gateway...
            uri, url = vt_scan_endpoint(file_hash)
            encoded_hash, expiry = generate_secure_link(uri)
            gateway_url = url + f"&md5={encoded_hash}" + f"&expires={expiry}"
            request = requests.get(url = gateway_url)
            if request.status_code == 200:
                response = json.loads(request.content)
                sandbox_results = response['sandbox_results']
                vendors_results = response['vendors_results']
                last_analysis_stats = response['last_analysis_stats']
                crowdsourced_ids_results = response['crowdsourced_ids_results']
                self.write_scan_results_to_db(obj_pk, sandbox_results, vendors_results, last_analysis_stats, crowdsourced_ids_results)
            elif request.status_code == 404:
                error_response = json.loads(request.content)['message']
                obj = Files.objects.get(id=obj_pk)
                obj.antiviruses_error_message = error_response
                obj.antiviruses_scanner_status = "FINISHED"
                obj.antiviruses_status_code = request.status_code
                obj.save()
            elif request.status_code == 429:
                error_response = json.loads(request.content)['message']
                obj = Files.objects.get(id=obj_pk)
                obj.antiviruses_error_message = error_response
                obj.antiviruses_scanner_status = "FINISHED"
                obj.antiviruses_status_code = request.status_code
            elif request.status_code == 501:
                error_response = json.loads(request.content)['message']
                obj = Files.objects.get(id=obj_pk)
                obj.antiviruses_error_message = error_response
                obj.antiviruses_scanner_status = "FINISHED"
                obj.antiviruses_status_code = json.loads(request.content)['status']
                obj.save()
            elif request.status_code == 400:
                error_response = json.loads(request.content)['error']
                obj = Files.objects.get(id=obj_pk)
                obj.antiviruses_error_message = error_response
                obj.antiviruses_scanner_status = "FINISHED"
                obj.antiviruses_status_code = request.status_code
            elif request.status_code == 402:
                error_response = json.loads(request.content)['error']
                obj = Files.objects.get(id=obj_pk)
                obj.antiviruses_error_message = error_response
                obj.antiviruses_scanner_status = "FINISHED"
                obj.antiviruses_status_code = request.status_code
                #in case of first failure deactive the sandbox scanner 
                scanner_obj = Scanners.objects.first()
                scanner_obj.sandbox_is_active = False
                scanner_obj.save()
        except:
                error_response = "probably could not send request to virus total"
                obj = Files.objects.get(id=obj_pk)
                obj.antiviruses_error_message = error_response
                obj.antiviruses_scanner_status = "FINISHED"
                obj.antiviruses_status_code = request.status_code
                obj.save()


    def write_scan_results_to_db(self, obj_pk ,sandbox_results, vendors_results, last_analysis_stats, crowdsourced_ids_results):
        obj = Files.objects.get(id=obj_pk)
        if sandbox_results or vendors_results:
            obj.antiviruses_scan_result = True
            obj.antiviruses_scanner_status = "FINISHED"
            obj.antiviruses_status_code = 200
            obj.antiviruses_scan_sandbox_summary = sandbox_results
            obj.antiviruses_scan_vendors_summary = vendors_results
            obj.antiviruses_crowdsourced_ids_results = crowdsourced_ids_results
            obj.antiviruses_last_analysis_stats = last_analysis_stats
            obj.save()
        else:
            obj.antiviruses_scan_result = False
            obj.antiviruses_scanner_status = "FINISHED"
            obj.antiviruses_status_code = 200
            obj.antiviruses_scan_sandbox_summary = sandbox_results
            obj.antiviruses_scan_vendors_summary = vendors_results
            obj.antiviruses_crowdsourced_ids_results
            obj.antiviruses_last_analysis_stats = last_analysis_stats
            obj.save()
                