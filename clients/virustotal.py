from analyze.models import Files
from malware_analysis.settings import VIRUSTOTAL_APIKEY
import requests
import json
import logging
import subprocess as sp

class VirusTotalClient():


    def get_file_report_by_hash(self, obj_pk, file):
        logging.info(file)
        Command = ['md5sum', f"{file}"]
        proc = sp.Popen(Command, stderr=sp.PIPE, stdout=sp.PIPE)
        stdout, stderr = proc.communicate()
        # file_hash = md5(file)
        if stderr:
            obj = Files.objects.get(id=obj_pk)
            error_message = {"error",stderr.decode()}
            obj.antiviruses_error_message = error_message
            obj.antiviruses_scanner_status = "FAILED"
        decoded_stdout = stdout.decode()
        file_hash = decoded_stdout.split()[0]
        logging.info(f"file returns with an error: {stderr}")
        logging.info(f"file hash is : {stdout}")
        #request hash to virustotal
        self.scan_file_by_hash(obj_pk, file_hash)
    
    def scan_file_by_hash(self, obj_pk, file_hash):
        sandbox_results = {}
        vendors_results = {}
        virustotal_url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        headers = {"accept": "application/json", "X-Apikey": VIRUSTOTAL_APIKEY}
        request = requests.get(url=virustotal_url, headers=headers)
        if request.status_code ==200:
            response = json.loads(request.content)
            scan_information = response["data"]["attributes"]
            if 'sandbox_verdicts' in scan_information:
                sandbox_verdicts = scan_information['sandbox_verdicts']
                for key, value in sandbox_verdicts.items():
                    if value['category'] == "malicious" or value['category'] == "suspicious":
                        sandbox_results[f"{key}"] = value
            else:
                pass
            if 'last_analysis_results' in scan_information:
                vendors_scan = scan_information['last_analysis_results']
                for key, value in vendors_scan.items():
                    if value['category'] == "malicious" or value['category'] == "suspicious":
                        vendors_results[f"{key}"] = value
            else:
                pass
            if 'last_analysis_stats' in scan_information:
                last_analysis_stats = scan_information['last_analysis_stats']
            else:
                pass
            if 'crowdsourced_ids_results' in scan_information:
                crowdsourced_ids_results = scan_information['crowdsourced_ids_results']
            else:
                crowdsourced_ids_results = None
            self.write_scan_results_to_db(obj_pk, sandbox_results, vendors_results, last_analysis_stats, crowdsourced_ids_results)
        else:
            error_response = json.loads(request.content)['error']['message']
            obj = Files.objects.get(id=obj_pk)
            obj.antiviruses_error_message = error_response
            obj.antiviruses_scanner_status = "FAILED"
            obj.antiviruses_status_code = request.status_code
            obj.save()

    def write_scan_results_to_db(self, obj_pk ,sandbox_results, vendors_results, last_analysis_stats, crowdsourced_ids_results):
        obj = Files.objects.get(id=obj_pk)
        if sandbox_results or vendors_results:
            obj.antiviruses_scan_result = True
            obj.antiviruses_scanner_status = "FINISHED"
            obj.antiviruses_status_code = 200
            obj.antiviruses_scan_sandbox_summary = sandbox_results
            obj.antiviruses_scan_vendors_summary = vendors_results
            obj.antiviruses_crowdsourced_ids_results = crowdsourced_ids_results
            obj.antiviruses_last_analysis_stats = last_analysis_stats
            obj.save()
        else:
            obj.antiviruses_scan_result = False
            obj.antiviruses_scanner_status = "FINISHED"
            obj.antiviruses_status_code = 200
            obj.antiviruses_scan_sandbox_summary = sandbox_results
            obj.antiviruses_scan_vendors_summary = vendors_results
            obj.antiviruses_crowdsourced_ids_results
            obj.antiviruses_last_analysis_stats = last_analysis_stats
            obj.save()
                