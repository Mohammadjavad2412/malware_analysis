from malware_analysis.settings import DAAS_MANAGER_URL
import subprocess as sp
import requests
import json
import hashlib
import mimetypes

def get_allowed_files(username, password):

    body = {
        "email": username,       
        "password": password
    }
    manager_get_token_url = f"http://{DAAS_MANAGER_URL}/users/login/"
    request = requests.post(url=manager_get_token_url, data=body)
    if request.status_code ==200:
        response = json.loads(request.content)
        access_token = response['access_token']
        request_headers = {"Authorization" : f"Bearer {access_token}"}
        manager_user_profile_url = f"http://{DAAS_MANAGER_URL}/users/profile/"
        request = requests.get(url=manager_user_profile_url, headers=request_headers)
        if request.status_code == 200:
            response = json.loads(request.content)
            allowed_download = response['allowed_files_type_for_download']
            allowed_upload = response['allowed_files_type_for_upload']
            return allowed_download, allowed_upload
        elif request.status_code == 400:
            raise CustomException("invalid data passed", 400)    
        else:
            raise CustomException("server down, try later", 500)
    elif request.status_code == 400:
        raise CustomException("invalid data passed", 400)
    else:
        raise CustomException("server down, try later", 500)


def file_type_detection(file_path, file_content_type):
    COMMAND = ['file', '-i', f'{file_path}']
    proc = sp.Popen(COMMAND, stdin=sp.PIPE, stderr=sp.PIPE, stdout=sp.PIPE)
    out, err = proc.communicate()
    if out:
        pre_content = out.decode().split(':')
        content = pre_content[1].split(';')[0].strip()
    if file_content_type == 'application/x-msdos-program':
        file_content_type = 'application/x-dosexec'
    if file_content_type == 'application/x-iso9660':
        file_content_type = 'application/octet-stream' 
    extenstion_content_mapper_dict = mimetypes.types_map
    if file_content_type == content:
        try:
            extensions = []
            if content == 'application/x-dosexec':
                extension = ['.exe', '.dll']
                return extension, content
            if content == 'application/octet-stream':
                extension = ['.iso']
                return extension, content
            else:
                for k, v in extenstion_content_mapper_dict.items():
                    if v == content:
                        extension = k
                        extensions.append(extension)
                return extensions, content
        except:
            raise CustomException("file extension Not Supported Error", 400)
    else:
        raise CustomException("content of the file and it's name is different", 400)

def get_file_hash(file_path):
    Command = ['md5sum', f"{file_path}"]
    proc = sp.Popen(Command, stderr=sp.PIPE, stdout=sp.PIPE)
    stdout, stderr = proc.communicate()
    if stderr:
        file_hash_error = {"error",stderr.decode()}
    decoded_stdout = stdout.decode()
    file_hash = decoded_stdout.split()[0]
    return file_hash

class CustomException(Exception):
    def __init__(self, message, status_code):
        super().__init__(message)
        self.status_code = status_code
