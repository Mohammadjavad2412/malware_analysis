from analyze.models import Files
from django.core.files.storage import default_storage
from django.db.models import Q
from malware_analysis.settings import DAAS_MANAGER_URL
from clients.yara import YaraClient
import logging
import traceback
import subprocess as sp
import magic
import requests
import json
import mimetypes
import pprint
import os

#remove files which existed longer than a day
def remove_long_existed_files():
    try:
        objects = Files.objects.filter(Q(yara_scanner_status="FINISHED") | Q(yara_scanner_status="FAILED"), Q(clamav_scanner_status="FINISHED") | Q(clamav_scanner_status="FAILED"), Q(antiviruses_scanner_status="FINISHED") | Q(antiviruses_scanner_status="FAILED"))
        for obj in objects:
            file_field = obj.file
            file_path = file_field.path
            default_storage.delete(file_path)
    except:
        logging.error(traceback.format_exc())

def get_allowed_files(username, password):

    body = {
        "email": username,
        "password": password
    }
    manager_get_token_url = f"http://{DAAS_MANAGER_URL}/users/login/"
    request = requests.post(url=manager_get_token_url, data=body)
    if request.status_code ==200:
        response = json.loads(request.content)
        access_token = response['access_token']
        request_headers = {"Authorization" : f"Bearer {access_token}"}
        manager_user_profile_url = f"http://{DAAS_MANAGER_URL}/users/profile/"
        request = requests.get(url=manager_user_profile_url, headers=request_headers)
        if request.status_code == 200:
            response = json.loads(request.content)
            allowed_download = response['allowed_files_type_for_download']
            allowed_upload = response['allowed_files_type_for_upload']
            return allowed_download, allowed_upload
        elif request.status_code == 400:
            raise CustomException("invalid data passed", 400)    
        else:
            raise CustomException("server down, try later", 500)
    elif request.status_code == 400:
        raise CustomException("invalid data passed", 400)
    else:
        raise CustomException("server down, try later", 500)


def file_type_detection(file_path):
    COMMAND = ['file', '-i', f'{file_path}']
    proc = sp.Popen(COMMAND, stdin=sp.PIPE, stderr=sp.PIPE, stdout=sp.PIPE)
    out, err = proc.communicate()
    if out:
        pre_content = out.decode().split(':')
        content = pre_content[1].split(';')[0].strip()
    pprint.pprint(mimetypes.types_map)
    extenstion_content_mapper_dict = mimetypes.types_map
    try:
        if content == 'application/x-dosexec':
            extension = ['.exe', '.dll']
            return extension
        if content == 'application/octet-stream':
            extension = '.iso'
            return extension
        else:
            for k, v in extenstion_content_mapper_dict.items():
                if v == content:
                    extension = k
                    break
            return extension
    except:
        raise CustomException("file extension Not Supported Error", 400)


class CustomException(Exception):
    def __init__(self, message, status_code):
        super().__init__(message)
        self.status_code = status_code
